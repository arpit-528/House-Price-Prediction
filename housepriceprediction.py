# -*- coding: utf-8 -*-
"""HousePricePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wZu1APLLC9lnAiYQsQlpB_PdSQE7mNUl

This project  is about predicting the house price of boston city based on America. X features include area, furnshing status, bedrooms, bathrooms etc.

Model -> Linear Regression
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import xgboost as xgb

df = pd.read_csv("/content/Housing.csv")

# Exploratory Data Analysis (EDA)
print(df.head())
print(df.info())
print(df.describe())

# Check for missing values
print("Missing values per column:\n", df.isnull().sum())

# Convert categorical variables using one-hot encoding
categorical_cols = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea', 'furnishingstatus']
df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

# Split dataset
X = df.drop(columns=['price'])  # Features
y = df['price']  # Target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling (Standardization)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train Linear Regression Model
lr_model = LinearRegression()
lr_model.fit(X_train_scaled, y_train)

# Predictions
y_pred_lr = lr_model.predict(X_test_scaled)

# Evaluation
print("Linear Regression Performance:")
print("MAE:", mean_absolute_error(y_test, y_pred_lr))
print("MSE:", mean_squared_error(y_test, y_pred_lr))
print("R2 Score:", r2_score(y_test, y_pred_lr))

# Train XGBoost Model
xgb_model = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, random_state=42)
xgb_model.fit(X_train, y_train)

# Predictions
y_pred_xgb = xgb_model.predict(X_test)

# Evaluation
print("\nXGBoost Performance:")
print("MAE:", mean_absolute_error(y_test, y_pred_xgb))
print("MSE:", mean_squared_error(y_test, y_pred_xgb))
print("R2 Score:", r2_score(y_test, y_pred_xgb))

# Plot actual vs predicted prices
plt.figure(figsize=(8, 5))
plt.scatter(y_test, y_pred_xgb, alpha=0.5, color='blue', label='XGBoost Predictions')
plt.scatter(y_test, y_pred_lr, alpha=0.5, color='red', label='Linear Regression Predictions')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.legend()
plt.title("Actual vs Predicted Prices")
plt.show()

# Function to Predict House Price
def predict_price(features):
    # Convert input to DataFrame with correct column names
    input_data = pd.DataFrame([features], columns=X.columns)
    input_scaled = scaler.transform(input_data)  # Standardize
    predicted_price = xgb_model.predict(input_scaled)[0]
    return predicted_price

# Example Usage
sample_house = {
    "area": 6000,
    "bedrooms": 3,
    "bathrooms": 1,
    "stories": 2,
    "parking": 1,
    "mainroad_yes": 1,
    "guestroom_yes": 1,
    "basement_yes": 0,
    "hotwaterheating_yes": 1,
    "airconditioning_yes": 0,
    "prefarea_yes": 0,
    "furnishingstatus_semi-furnished": 1,
    "furnishingstatus_unfurnished": 0
}

predicted_price = predict_price(sample_house)
print("Predicted House Price:", predicted_price)

